'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AJDNNDatabase_v5")>  _
Partial Public Class KrypinCreateLinqDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblAJKrypinUserData(instance As tblAJKrypinUserData)
    End Sub
  Partial Private Sub UpdatetblAJKrypinUserData(instance As tblAJKrypinUserData)
    End Sub
  Partial Private Sub DeletetblAJKrypinUserData(instance As tblAJKrypinUserData)
    End Sub
  Partial Private Sub InserttblAjKrypinUserSetting(instance As tblAjKrypinUserSetting)
    End Sub
  Partial Private Sub UpdatetblAjKrypinUserSetting(instance As tblAjKrypinUserSetting)
    End Sub
  Partial Private Sub DeletetblAjKrypinUserSetting(instance As tblAjKrypinUserSetting)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.barnenskrypinCreateKrypinLibrary.My.MySettings.Default.AJDNNDatabase_v5ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblAJKrypinUserDatas() As System.Data.Linq.Table(Of tblAJKrypinUserData)
		Get
			Return Me.GetTable(Of tblAJKrypinUserData)
		End Get
	End Property
	
	Public ReadOnly Property tblAjKrypinUserSettings() As System.Data.Linq.Table(Of tblAjKrypinUserSetting)
		Get
			Return Me.GetTable(Of tblAjKrypinUserSetting)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AjKrypinExists")>  _
	Public Function AjKrypinExists(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal userid As System.Nullable(Of Integer)) As ISingleResult(Of AjKrypinExistsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userid)
		Return CType(result.ReturnValue,ISingleResult(Of AjKrypinExistsResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAJKrypinUserData")>  _
Partial Public Class tblAJKrypinUserData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _KrypID As Integer
	
	Private _UserId As Integer
	
	Private _Presentation As String
	
	Private _BBUserMess As String
	
	Private _Avatar As String
	
	Private _ValdUserCss As System.Nullable(Of Integer)
	
	Private _KrypinBehorighet As Integer
	
	Private _LaserJustnu As System.Nullable(Of Integer)
	
	Private _Visits As System.Nullable(Of Integer)
	
	Private _MeVisits As System.Nullable(Of Integer)
	
	Private _ShowMess As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnKrypIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnKrypIDChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPresentationChanging(value As String)
    End Sub
    Partial Private Sub OnPresentationChanged()
    End Sub
    Partial Private Sub OnBBUserMessChanging(value As String)
    End Sub
    Partial Private Sub OnBBUserMessChanged()
    End Sub
    Partial Private Sub OnAvatarChanging(value As String)
    End Sub
    Partial Private Sub OnAvatarChanged()
    End Sub
    Partial Private Sub OnValdUserCssChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnValdUserCssChanged()
    End Sub
    Partial Private Sub OnKrypinBehorighetChanging(value As Integer)
    End Sub
    Partial Private Sub OnKrypinBehorighetChanged()
    End Sub
    Partial Private Sub OnLaserJustnuChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLaserJustnuChanged()
    End Sub
    Partial Private Sub OnVisitsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVisitsChanged()
    End Sub
    Partial Private Sub OnMeVisitsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMeVisitsChanged()
    End Sub
    Partial Private Sub OnShowMessChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnShowMessChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KrypID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property KrypID() As Integer
		Get
			Return Me._KrypID
		End Get
		Set
			If ((Me._KrypID = value)  _
						= false) Then
				Me.OnKrypIDChanging(value)
				Me.SendPropertyChanging
				Me._KrypID = value
				Me.SendPropertyChanged("KrypID")
				Me.OnKrypIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int NOT NULL")>  _
	Public Property UserId() As Integer
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Presentation", DbType:="NVarChar(500)")>  _
	Public Property Presentation() As String
		Get
			Return Me._Presentation
		End Get
		Set
			If (String.Equals(Me._Presentation, value) = false) Then
				Me.OnPresentationChanging(value)
				Me.SendPropertyChanging
				Me._Presentation = value
				Me.SendPropertyChanged("Presentation")
				Me.OnPresentationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BBUserMess", DbType:="NVarChar(255)")>  _
	Public Property BBUserMess() As String
		Get
			Return Me._BBUserMess
		End Get
		Set
			If (String.Equals(Me._BBUserMess, value) = false) Then
				Me.OnBBUserMessChanging(value)
				Me.SendPropertyChanging
				Me._BBUserMess = value
				Me.SendPropertyChanged("BBUserMess")
				Me.OnBBUserMessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Avatar", DbType:="NVarChar(255)")>  _
	Public Property Avatar() As String
		Get
			Return Me._Avatar
		End Get
		Set
			If (String.Equals(Me._Avatar, value) = false) Then
				Me.OnAvatarChanging(value)
				Me.SendPropertyChanging
				Me._Avatar = value
				Me.SendPropertyChanged("Avatar")
				Me.OnAvatarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValdUserCss", DbType:="Int")>  _
	Public Property ValdUserCss() As System.Nullable(Of Integer)
		Get
			Return Me._ValdUserCss
		End Get
		Set
			If (Me._ValdUserCss.Equals(value) = false) Then
				Me.OnValdUserCssChanging(value)
				Me.SendPropertyChanging
				Me._ValdUserCss = value
				Me.SendPropertyChanged("ValdUserCss")
				Me.OnValdUserCssChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KrypinBehorighet", DbType:="Int NOT NULL")>  _
	Public Property KrypinBehorighet() As Integer
		Get
			Return Me._KrypinBehorighet
		End Get
		Set
			If ((Me._KrypinBehorighet = value)  _
						= false) Then
				Me.OnKrypinBehorighetChanging(value)
				Me.SendPropertyChanging
				Me._KrypinBehorighet = value
				Me.SendPropertyChanged("KrypinBehorighet")
				Me.OnKrypinBehorighetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LaserJustnu", DbType:="Int")>  _
	Public Property LaserJustnu() As System.Nullable(Of Integer)
		Get
			Return Me._LaserJustnu
		End Get
		Set
			If (Me._LaserJustnu.Equals(value) = false) Then
				Me.OnLaserJustnuChanging(value)
				Me.SendPropertyChanging
				Me._LaserJustnu = value
				Me.SendPropertyChanged("LaserJustnu")
				Me.OnLaserJustnuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visits", DbType:="Int")>  _
	Public Property Visits() As System.Nullable(Of Integer)
		Get
			Return Me._Visits
		End Get
		Set
			If (Me._Visits.Equals(value) = false) Then
				Me.OnVisitsChanging(value)
				Me.SendPropertyChanging
				Me._Visits = value
				Me.SendPropertyChanged("Visits")
				Me.OnVisitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MeVisits", DbType:="Int")>  _
	Public Property MeVisits() As System.Nullable(Of Integer)
		Get
			Return Me._MeVisits
		End Get
		Set
			If (Me._MeVisits.Equals(value) = false) Then
				Me.OnMeVisitsChanging(value)
				Me.SendPropertyChanging
				Me._MeVisits = value
				Me.SendPropertyChanged("MeVisits")
				Me.OnMeVisitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowMess", DbType:="Int")>  _
	Public Property ShowMess() As System.Nullable(Of Integer)
		Get
			Return Me._ShowMess
		End Get
		Set
			If (Me._ShowMess.Equals(value) = false) Then
				Me.OnShowMessChanging(value)
				Me.SendPropertyChanging
				Me._ShowMess = value
				Me.SendPropertyChanged("ShowMess")
				Me.OnShowMessChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAjKrypinUserSettings")>  _
Partial Public Class tblAjKrypinUserSetting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _settingID As Integer
	
	Private _userid As System.Nullable(Of Integer)
	
	Private _settingTypID As System.Nullable(Of Integer)
	
	Private _settingValue As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsettingIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsettingIDChanged()
    End Sub
    Partial Private Sub OnuseridChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnuseridChanged()
    End Sub
    Partial Private Sub OnsettingTypIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsettingTypIDChanged()
    End Sub
    Partial Private Sub OnsettingValueChanging(value As String)
    End Sub
    Partial Private Sub OnsettingValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_settingID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property settingID() As Integer
		Get
			Return Me._settingID
		End Get
		Set
			If ((Me._settingID = value)  _
						= false) Then
				Me.OnsettingIDChanging(value)
				Me.SendPropertyChanging
				Me._settingID = value
				Me.SendPropertyChanged("settingID")
				Me.OnsettingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userid", DbType:="Int")>  _
	Public Property userid() As System.Nullable(Of Integer)
		Get
			Return Me._userid
		End Get
		Set
			If (Me._userid.Equals(value) = false) Then
				Me.OnuseridChanging(value)
				Me.SendPropertyChanging
				Me._userid = value
				Me.SendPropertyChanged("userid")
				Me.OnuseridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_settingTypID", DbType:="Int")>  _
	Public Property settingTypID() As System.Nullable(Of Integer)
		Get
			Return Me._settingTypID
		End Get
		Set
			If (Me._settingTypID.Equals(value) = false) Then
				Me.OnsettingTypIDChanging(value)
				Me.SendPropertyChanging
				Me._settingTypID = value
				Me.SendPropertyChanged("settingTypID")
				Me.OnsettingTypIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_settingValue", DbType:="NVarChar(250)")>  _
	Public Property settingValue() As String
		Get
			Return Me._settingValue
		End Get
		Set
			If (String.Equals(Me._settingValue, value) = false) Then
				Me.OnsettingValueChanging(value)
				Me.SendPropertyChanging
				Me._settingValue = value
				Me.SendPropertyChanged("settingValue")
				Me.OnsettingValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class AjKrypinExistsResult
	
	Private _UserId As Integer
	
	Private _Expr1 As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int NOT NULL")>  _
	Public Property UserId() As Integer
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me._UserId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expr1", DbType:="Int NOT NULL")>  _
	Public Property Expr1() As Integer
		Get
			Return Me._Expr1
		End Get
		Set
			If ((Me._Expr1 = value)  _
						= false) Then
				Me._Expr1 = value
			End If
		End Set
	End Property
End Class
